import { useEffect, useState } from "react";
import SummaryApi from "../common";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import displayCOPCurrency from "../helpers/displayCurrency";
import "./AllVentas.css";

const AllVentas = () => {
  const [ventas, setVentas] = useState([]);
  const [loading, setLoading] = useState(true);
  const [openEditVenta, setOpenEditVenta] = useState(false);
  const [selectedVenta, setSelectedVenta] = useState(null);
  const navigate = useNavigate();

  const fetchAllVentas = async () => {
    setLoading(true);
    try {
      const response = await fetch(SummaryApi.allVentas.url);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const dataResponse = await response.json();
      const allVentas = dataResponse?.data || [];
      // Filtrar solo las ventas de productos (excluye servicios)
      const filteredVentas = allVentas.filter((venta) => {
        if (
          venta.reservationDetails &&
          Array.isArray(venta.reservationDetails) &&
          venta.reservationDetails.length > 0
        ) {
          const category = venta.reservationDetails[0].category;
          return category && category.toLowerCase().includes("producto");
        }
        return false;
      });
      setVentas(filteredVentas);
    } catch (error) {
      console.error("Error al obtener ventas:", error);
      toast.error("Error al obtener ventas.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAllVentas();
  }, []);

  const handleEditVenta = (venta) => {
    setSelectedVenta(venta);
    setOpenEditVenta(true);
  };

  const handleDeleteVenta = async (ventaId) => {
    try {
      const response = await fetch(`${SummaryApi.deleteVenta.url}/${ventaId}`, {
        method: SummaryApi.deleteVenta.method,
      });
      const dataResponse = await response.json();
      if (dataResponse.success) {
        toast.success("Venta eliminada correctamente.");
        fetchAllVentas();
      } else {
        toast.error("Error al eliminar la venta.");
      }
    } catch (error) {
      console.error("Error al eliminar venta:", error);
      toast.error("Error al eliminar venta.");
    }
  };

  return (
    <div className="ventas-container">
      <div className="ventas-header">
        <h2>Ventas Realizadas (Productos)</h2>
        <button
          className="add-button"
          onClick={() => {
            /* Aquí podrías abrir un modal o navegar a una página para agregar una venta manualmente */
          }}
        >
          Agregar Venta
        </button>
      </div>
      {loading ? (
        <p>Cargando ventas...</p>
      ) : ventas.length === 0 ? (
        <p>No se encontraron ventas.</p>
      ) : (
        <table className="ventas-table">
          <thead>
            <tr>
              <th>Sr.</th>
              <th>Usuario</th>
              <th>Email</th>
              <th>Producto</th>
              <th>Fecha</th>
              <th>Total</th>
              <th>Envío</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {ventas.map((venta, index) => {
              // Se asume que para productos, los detalles se encuentran en el primer elemento de reservationDetails
              const details =
                venta.reservationDetails && venta.reservationDetails.length > 0
                  ? venta.reservationDetails[0]
                  : {};
              const productName = details.productName || "N/D";
              const totalPrice = details.totalPrice || details.sellingPrice || 0;
              return (
                <tr key={venta._id}>
                  <td>{index + 1}</td>
                  {/* Mostrar la información del usuario (populada en el campo user) */}
                  <td>{venta.user?.name || "N/D"}</td>
                  <td>{venta.user?.email || "N/D"}</td>
                  <td>{productName}</td>
                  <td>{new Date(venta.createdAt).toLocaleDateString()}</td>
                  <td>
                    {totalPrice ? displayCOPCurrency(totalPrice) : "N/D"}
                  </td>
                  <td>
                    {venta.shippingInfo ? (
                      <div>
                        <p>
                          <strong>Nombre:</strong> {venta.shippingInfo.name}
                        </p>
                        <p>
                          <strong>Dirección:</strong> {venta.shippingInfo.address}
                        </p>
                        <p>
                          <strong>Teléfono:</strong> {venta.shippingInfo.phone}
                        </p>
                      </div>
                    ) : (
                      "N/D"
                    )}
                  </td>
                  <td>
                    <button
                      onClick={() => handleEditVenta(venta)}
                      className="action-button"
                    >
                      Editar
                    </button>
                    <button
                      onClick={() => handleDeleteVenta(venta._id)}
                      className="action-button delete"
                    >
                      Eliminar
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      )}
      {openEditVenta && (
        <div className="modal-placeholder">
          <div className="modal-content">
            <h3>Editar Venta</h3>
            <pre>{JSON.stringify(selectedVenta, null, 2)}</pre>
            <button
              onClick={() => {
                setOpenEditVenta(false);
                fetchAllVentas();
              }}
            >
              Cerrar Modal
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

AllVentas.propTypes = {
  // Define PropTypes si lo consideras necesario.
};

export default AllVentas;
