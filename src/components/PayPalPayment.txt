import React from "react";
import { PayPalScriptProvider, PayPalButtons } from "@paypal/react-paypal-js";
import { toast } from "react-toastify";
import SummaryApi from "../common";
import { useNavigate } from "react-router-dom";

const PayPalPayment = ({ product }) => {
  const navigate = useNavigate();
  const clientId = process.env.REACT_APP_PAYPAL_CLIENT_ID || "";
  const initialOptions = { "client-id": clientId, currency: "USD" };

  // Función para crear la orden en el backend
  const createOrder = () => {
    return fetch(SummaryApi.createOrder.url, {
      method: SummaryApi.createOrder.method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        product: {
          description: product?.description || "Producto sin descripción",
          cost: product?.cost, // Valor en USD
        },
      }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Error al crear la orden");
        }
        return response.json();
      })
      .then((order) => {
        console.log("Datos de la orden creada:", order);
        // Verifica si la respuesta contiene la propiedad 'id' o 'orderID'
        const orderId = order.id || order.orderID;
        if (!orderId) {
          throw new Error("La respuesta no contiene un order id");
        }
        return orderId;
      })
      .catch((error) => {
        toast.error("Error al crear la orden de pago");
        console.error("createOrder error:", error);
        // Propaga el error para que PayPalButtons pueda manejarlo
        throw error;
      });
  };

  // Función para capturar el pago en el backend
  const onApprove = (data) => {
    return fetch(SummaryApi.captureOrder.url, {
      method: SummaryApi.captureOrder.method,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        orderID: data.orderID,
      }),
    })
      .then((response) => {
        if (!response.ok) {
          throw new Error("Error al capturar el pago");
        }
        return response.json();
      })
      .then((details) => {
        toast.success("¡Pago realizado exitosamente!", {
          icon: "🥳",
        });
        console.log("Detalles del pago:", details);
        navigate("/payment-success");
      })
      .catch((error) => {
        toast.error("El pago falló, intenta nuevamente.");
        console.error("onApprove error:", error);
        navigate("/payment-failure");
      });
  };

  const onError = (err) => {
    toast.error("Ocurrió un error en el procesamiento del pago.");
    console.error("PayPal Buttons Error:", err);
    navigate("/payment-failure");
  };

  return (
    <PayPalScriptProvider options={initialOptions}>
      <div>
        <PayPalButtons
          style={{ layout: "horizontal" }}
          createOrder={createOrder}
          onApprove={onApprove}
          onError={onError}
        />
      </div>
    </PayPalScriptProvider>
  );
};

export default PayPalPayment;
